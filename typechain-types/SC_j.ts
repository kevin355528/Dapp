/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SC_jInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Accept_task"
      | "Aggregate_answer"
      | "Stake_Price"
      | "addr"
      | "ans"
      | "ans_count"
      | "ans_hash"
      | "cert_req"
      | "data"
      | "provideXvi"
      | "reward"
      | "setReward"
      | "show_ans"
      | "staking"
      | "task_time"
      | "verifier"
      | "withdraw_reward"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Accept_task",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "Aggregate_answer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Stake_Price",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addr", values?: undefined): string;
  encodeFunctionData(functionFragment: "ans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "ans_count",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ans_hash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cert_req", values?: undefined): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideXvi",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "show_ans", values?: undefined): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "task_time", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_reward",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "Accept_task",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Aggregate_answer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Stake_Price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ans_count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ans_hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cert_req", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provideXvi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "show_ans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "task_time", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_reward",
    data: BytesLike
  ): Result;
}

export interface SC_j extends BaseContract {
  connect(runner?: ContractRunner | null): SC_j;
  waitForDeployment(): Promise<this>;

  interface: SC_jInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Accept_task: TypedContractMethod<
    [
      cert: string,
      ID: BigNumberish,
      unixTimeStamp: BigNumberish,
      pk: BytesLike,
      count: BigNumberish,
      rep: BigNumberish
    ],
    [boolean],
    "payable"
  >;

  Aggregate_answer: TypedContractMethod<
    [random_num: BigNumberish, rep: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  Stake_Price: TypedContractMethod<
    [count: BigNumberish, rep: BigNumberish],
    [bigint],
    "view"
  >;

  addr: TypedContractMethod<[], [string], "view">;

  ans: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  ans_count: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  ans_hash: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  cert_req: TypedContractMethod<[], [string], "view">;

  data: TypedContractMethod<[], [string], "view">;

  provideXvi: TypedContractMethod<
    [xvi: BytesLike, proof: BytesLike],
    [boolean],
    "nonpayable"
  >;

  reward: TypedContractMethod<[], [bigint], "view">;

  setReward: TypedContractMethod<[x: BigNumberish], [void], "nonpayable">;

  show_ans: TypedContractMethod<[], [bigint], "view">;

  staking: TypedContractMethod<[], [bigint], "view">;

  task_time: TypedContractMethod<[], [bigint], "view">;

  verifier: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        boolean,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint
      ] & {
        task_accept: boolean;
        xvi: string;
        cert: string;
        ID: bigint;
        unixTimeStamp_expire: bigint;
        pk: string;
        ans: bigint;
        proof: string;
        reputation: bigint;
      }
    ],
    "view"
  >;

  withdraw_reward: TypedContractMethod<
    [proof_: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Accept_task"
  ): TypedContractMethod<
    [
      cert: string,
      ID: BigNumberish,
      unixTimeStamp: BigNumberish,
      pk: BytesLike,
      count: BigNumberish,
      rep: BigNumberish
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Aggregate_answer"
  ): TypedContractMethod<
    [random_num: BigNumberish, rep: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Stake_Price"
  ): TypedContractMethod<
    [count: BigNumberish, rep: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ans"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ans_count"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ans_hash"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "cert_req"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "data"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "provideXvi"
  ): TypedContractMethod<
    [xvi: BytesLike, proof: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setReward"
  ): TypedContractMethod<[x: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "show_ans"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "staking"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "task_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        boolean,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint
      ] & {
        task_accept: boolean;
        xvi: string;
        cert: string;
        ID: bigint;
        unixTimeStamp_expire: bigint;
        pk: string;
        ans: bigint;
        proof: string;
        reputation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw_reward"
  ): TypedContractMethod<[proof_: BytesLike], [void], "nonpayable">;

  filters: {};
}
